----------------------------------------------------------------------
Feature: attribute_2
Train: [5, 6, 8, 9]
Test : [6, 7, 9]
----------------------------------------------------------------------

----------------------------------------------------------------------
Feature: attribute_3
Train: [5, 6, 8, 9]
Test : [4, 5, 7, 9] 
----------------------------------------------------------------------


----------------------------------------------------------------------
Feature: attribute_0
Train: ['material_5', 'material_7']
Test : ['material_5', 'material_7']
----------------------------------------------------------------------

----------------------------------------------------------------------
Feature: attribute_1
Train: ['material_5', 'material_6', 'material_8']
Test : ['material_5', 'material_6', 'material_7']
----------------------------------------------------------------------


----------------------------------------------------------------------
Feature: product_code
Train: ['A', 'B', 'C', 'D', 'E']
Test : ['F', 'G', 'H', 'I']
----------------------------------------------------------------------



# LER PODE SER ÃšTIL NA MODELAGEM
# https://medium.com/@christopherjluke/exploring-linear-regression-with-statcast-8919302afaa0
# https://github.com/christopherjluke/wobaregressionmodel/blob/main/wobaregressionmodel.ipynb

# Aggregations
#meas_gr1_cols = [f"measurement_{i:d}" for i in list(range(3, 5)) + list(range(9, 17))]

# meas_gr_cols = [f'measurement_{i:d}' for i in list(range(5, 9))]
# for df in [df3_train, df3_test]:   
#     df['fe_meas_gr_avg'] = np.mean(df[meas_gr_cols], axis=1)
# 
# feature_float.append('fe_meas_gr_avg')

# Ideia de Ambros de adicionar valores ausentes como colunas extras
# https://www.kaggle.com/competitions/tabular-playground-series-aug-2022/discussion/342319
#df3_train['fe_m_5_missing'] = df3_train.measurement_5.isna().astype(int)
#df3_test['fe_m_5_missing']  = df3_test.measurement_5.isna().astype(int)



https://ing-bank.github.io/skorecard/howto/mix_with_other_packages/
 sklearn.compose.make_column_transformer(*transformers, remainder='drop', 




# https://machinelearningmastery.com/roc-curves-and-precision-recall-curves-for-imbalanced-classification/

https://machinelearningmastery.com/roc-curves-and-precision-recall-curves-for-imbalanced-classification/

https://brendanhasz.github.io/2019/03/04/target-encoding.html
https://github.com/shiguelita?tab=repositories

